# Generated by Django 5.2.1 on 2025-08-12 19:42

import django.db.models.deletion
import uuid
from django.db import migrations, models


class Migration(migrations.Migration):

    dependencies = [
        ("memories", "0005_add_conversation_chunk_model_and_update_memory"),
    ]

    operations = [
        migrations.CreateModel(
            name="Entity",
            fields=[
                (
                    "id",
                    models.UUIDField(
                        default=uuid.uuid4,
                        editable=False,
                        primary_key=True,
                        serialize=False,
                    ),
                ),
                ("user_id", models.UUIDField(db_index=True)),
                (
                    "name",
                    models.CharField(
                        help_text="Canonical name of the entity", max_length=255
                    ),
                ),
                (
                    "entity_type",
                    models.CharField(
                        choices=[
                            ("user", "User"),
                            ("person", "Person"),
                            ("place", "Place"),
                            ("concept", "Concept"),
                            ("object", "Object"),
                            ("activity", "Activity"),
                            ("preference", "Preference"),
                            ("skill", "Skill"),
                            ("event", "Event"),
                            ("organization", "Organization"),
                            ("product", "Product"),
                        ],
                        max_length=20,
                    ),
                ),
                (
                    "graph_node_id",
                    models.CharField(
                        help_text="Neo4j node ID", max_length=255, unique=True
                    ),
                ),
                (
                    "aliases",
                    models.JSONField(
                        blank=True,
                        default=list,
                        help_text="Alternative names/mentions for this entity",
                    ),
                ),
                (
                    "description",
                    models.TextField(
                        blank=True, help_text="Additional context about the entity"
                    ),
                ),
                (
                    "confidence",
                    models.FloatField(
                        default=0.5, help_text="Confidence in entity extraction"
                    ),
                ),
                (
                    "conversation_chunk_ids",
                    models.JSONField(
                        default=list,
                        help_text="Conversation chunks that mentioned this entity",
                    ),
                ),
                ("first_mentioned", models.DateTimeField(auto_now_add=True)),
                ("last_mentioned", models.DateTimeField(auto_now=True)),
                ("mention_count", models.PositiveIntegerField(default=1)),
                ("created_at", models.DateTimeField(auto_now_add=True)),
                ("updated_at", models.DateTimeField(auto_now=True)),
            ],
            options={
                "indexes": [
                    models.Index(
                        fields=["user_id", "entity_type"],
                        name="memories_en_user_id_83e837_idx",
                    ),
                    models.Index(
                        fields=["user_id", "name"],
                        name="memories_en_user_id_b718a5_idx",
                    ),
                    models.Index(
                        fields=["graph_node_id"], name="memories_en_graph_n_194446_idx"
                    ),
                ],
                "unique_together": {("user_id", "name", "entity_type")},
            },
        ),
        migrations.CreateModel(
            name="EntityConversationChunk",
            fields=[
                (
                    "id",
                    models.UUIDField(
                        default=uuid.uuid4,
                        editable=False,
                        primary_key=True,
                        serialize=False,
                    ),
                ),
                ("user_id", models.UUIDField(db_index=True)),
                (
                    "content",
                    models.TextField(help_text="Original conversation text chunk"),
                ),
                (
                    "vector_id",
                    models.CharField(
                        help_text="Vector database ID for this chunk's embedding",
                        max_length=255,
                        unique=True,
                    ),
                ),
                (
                    "timestamp",
                    models.DateTimeField(
                        help_text="When this conversation segment occurred"
                    ),
                ),
                (
                    "extracted_entities",
                    models.JSONField(
                        default=list, help_text="Entity IDs extracted from this chunk"
                    ),
                ),
                (
                    "extracted_relationships",
                    models.JSONField(
                        default=list,
                        help_text="Relationship IDs extracted from this chunk",
                    ),
                ),
                (
                    "extraction_status",
                    models.CharField(
                        choices=[
                            ("pending", "Pending"),
                            ("processing", "Processing"),
                            ("completed", "Completed"),
                            ("failed", "Failed"),
                        ],
                        default="pending",
                        max_length=20,
                    ),
                ),
                (
                    "extraction_metadata",
                    models.JSONField(
                        default=dict, help_text="Metadata about the extraction process"
                    ),
                ),
                ("created_at", models.DateTimeField(auto_now_add=True)),
                ("updated_at", models.DateTimeField(auto_now=True)),
            ],
            options={
                "ordering": ["-timestamp"],
                "indexes": [
                    models.Index(
                        fields=["user_id", "timestamp"],
                        name="memories_en_user_id_c2045e_idx",
                    ),
                    models.Index(
                        fields=["vector_id"], name="memories_en_vector__ea87d2_idx"
                    ),
                    models.Index(
                        fields=["extraction_status"],
                        name="memories_en_extract_c3730d_idx",
                    ),
                ],
            },
        ),
        migrations.CreateModel(
            name="Relationship",
            fields=[
                (
                    "id",
                    models.UUIDField(
                        default=uuid.uuid4,
                        editable=False,
                        primary_key=True,
                        serialize=False,
                    ),
                ),
                ("user_id", models.UUIDField(db_index=True)),
                (
                    "relationship_type",
                    models.CharField(
                        choices=[
                            ("LOVES", "Loves"),
                            ("LIKES", "Likes"),
                            ("DISLIKES", "Dislikes"),
                            ("HATES", "Hates"),
                            ("PREFERS", "Prefers"),
                            ("KNOWS", "Knows"),
                            ("WORKS_WITH", "Works With"),
                            ("FRIENDS_WITH", "Friends With"),
                            ("FAMILY_OF", "Family Of"),
                            ("WORKS_AT", "Works At"),
                            ("STUDIES_AT", "Studies At"),
                            ("SKILLED_IN", "Skilled In"),
                            ("LEARNING", "Learning"),
                            ("LIVES_IN", "Lives In"),
                            ("VISITED", "Visited"),
                            ("WANTS_TO_VISIT", "Wants to Visit"),
                            ("DOES", "Does"),
                            ("ENJOYS", "Enjoys"),
                            ("PRACTICES", "Practices"),
                            ("USED_TO", "Used To"),
                            ("CURRENTLY", "Currently"),
                            ("PLANS_TO", "Plans To"),
                            ("RELATED_TO", "Related To"),
                            ("PART_OF", "Part Of"),
                            ("SIMILAR_TO", "Similar To"),
                        ],
                        max_length=20,
                    ),
                ),
                (
                    "graph_relationship_id",
                    models.CharField(
                        help_text="Neo4j relationship ID", max_length=255, unique=True
                    ),
                ),
                (
                    "strength",
                    models.FloatField(
                        default=0.5, help_text="Strength of the relationship (0-1)"
                    ),
                ),
                (
                    "confidence",
                    models.FloatField(
                        default=0.5, help_text="Confidence in relationship extraction"
                    ),
                ),
                (
                    "temporal_qualifier",
                    models.CharField(
                        choices=[
                            ("past", "Past"),
                            ("present", "Present"),
                            ("future", "Future"),
                            ("ongoing", "Ongoing"),
                            ("temporary", "Temporary"),
                        ],
                        default="present",
                        help_text="Temporal context of the relationship",
                        max_length=20,
                    ),
                ),
                (
                    "conversation_chunk_ids",
                    models.JSONField(
                        default=list,
                        help_text="Conversation chunks that established this relationship",
                    ),
                ),
                (
                    "evidence",
                    models.TextField(help_text="Supporting evidence from conversation"),
                ),
                ("established_at", models.DateTimeField(auto_now_add=True)),
                ("last_confirmed", models.DateTimeField(auto_now=True)),
                (
                    "is_active",
                    models.BooleanField(
                        default=True,
                        help_text="Whether relationship is currently valid",
                    ),
                ),
                ("created_at", models.DateTimeField(auto_now_add=True)),
                ("updated_at", models.DateTimeField(auto_now=True)),
                (
                    "source_entity",
                    models.ForeignKey(
                        on_delete=django.db.models.deletion.CASCADE,
                        related_name="outgoing_relationships",
                        to="memories.entity",
                    ),
                ),
                (
                    "target_entity",
                    models.ForeignKey(
                        on_delete=django.db.models.deletion.CASCADE,
                        related_name="incoming_relationships",
                        to="memories.entity",
                    ),
                ),
            ],
            options={
                "indexes": [
                    models.Index(
                        fields=["user_id", "relationship_type"],
                        name="memories_re_user_id_8fca18_idx",
                    ),
                    models.Index(
                        fields=["source_entity", "relationship_type"],
                        name="memories_re_source__7acc2c_idx",
                    ),
                    models.Index(
                        fields=["target_entity", "relationship_type"],
                        name="memories_re_target__a736b3_idx",
                    ),
                    models.Index(
                        fields=["graph_relationship_id"],
                        name="memories_re_graph_r_bf589f_idx",
                    ),
                ],
                "unique_together": {
                    ("source_entity", "target_entity", "relationship_type")
                },
            },
        ),
    ]
