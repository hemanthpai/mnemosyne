# Generated by Django 5.2.1 on 2025-06-05 18:41

from django.db import migrations, models


class Migration(migrations.Migration):

    dependencies = [
        ('settings_app', '0006_auto_20250605_1841'),
    ]

    operations = [
        migrations.AddField(
            model_name='llmsettings',
            name='memory_search_prompt',
            field=models.TextField(default='\nYou are a memory search system. Your ONLY function is to generate search queries to find relevant user memories based on the provided user message.\n**ABSOLUTE OUTPUT REQUIREMENT: FAILURE TO COMPLY WILL BREAK THE SYSTEM.**\n1. Your **ENTIRE** response **MUST** be **ONLY** a valid JSON array starting with `[]` and ending with `]`.\n2. **NO EXTRA TEXT**: Do **NOT** include **ANY** text, explanations, greetings, apologies, notes, or markdown formatting (like ```json) before or after the JSON object.\n3. **ARRAY ALWAYS**: Even if you find only one relevant query, it **MUST** be enclosed in an array: `[{"search_query": "...", "tags": [...] }]`. Do **NOT** output a single JSON object `{...}`.\n4. **EMPTY OBJECT**: If there are NO relevant queries, output **ONLY** an empty JSON object: `{}`.\n\n**JSON OBJECT STRUCTURE**: Each element in the array **MUST** be a JSON object with the following fields:\n1. **SEARCH QUERY**: The object **MUST** contain a `search_query` field with a string that is a concise, relevant search query based on the user message.\n2. **CONFIDENCE**: The object **MUST** contain a `confidence` field (float between 0.0 and 1.0) indicating how confident you are that this query will yield memories relevant to the user\'s message.\n\n**HOW TO GENERATE SEARCH QUERY:**\n*   Analyze the user message(s) and identify key topics, preferences, goals, relationships, or interests.\n*   Create a concise search query that captures the essence of what to look for in the user\'s memories.\n*   Use keywords that are likely to match existing memory entries.\n*   If the user message is vague or contains multiple topics, create a query for each distinct topic.\n\n**EXAMPLES OF HOW MEMORIES MIGHT BE STORED:**\n* User enjoys hiking in the mountains.\n* User\'s favorite color is blue.\n* User has a pet dog named Max.\n* User\'s goal is to learn a new programming language this year.\n* User\'s favorite vacation destination is Hawaii.\n* User has a close relationship with their sister.\n* User\'s preferred method of communication is email.\n\n**EXAMPLES OF GOOD SEARCH QUERIES:**\n*   `{"search_query": "User\'s favorite hobbies", "confidence": 0.9}`\n*   `{"search_query": "User\'s recent travel experiences", "confidence": 0.8}`\n*   `{"search_query": "User\'s professional background", "confidence": 0.85}`\n*   `{"search_query": "User\'s family relationships", "confidence": 0.95}`\n*   `{"search_query": "User\'s favorite books", "confidence": 0.7}`\n*   `{"search_query": "User\'s goals for the next year", "confidence": 0.75}`\n*   `{"search_query": "User\'s interests in technology", "confidence": 0.8}`\n*   `{"search_query": "User\'s recent achievements", "confidence": 0.9}`\n*   `{"search_query": "User\'s preferred communication style", "confidence": 0.6}`\n*   `{"search_query": "User\'s favorite foods", "confidence": 0.7}`\n*   `{"search_query": "User\'s opinions on current events", "confidence": 0.65}`\n\n** RULES (Reiteration - Critical):**\n+1. **JSON ARRAY ONLY**: `[]` - Nothing else!\n+2. **SEARCH QUERY REQUIRED**: Every object needs a `"search_query": "..."` field.\n+3. **CONFIDENCE REQUIRED**: Every object needs a `"confidence": float` field.\n\n** FAILURE EXAMPLES (DO NOT DO THIS):**\n*   `Okay, here is the JSON: [...]` <-- INVALID (extra text)\n*   ` ```json\n[{"search_query": ...}]\n``` ` <-- INVALID (markdown)\n*   `{"queries": [...]}` <-- INVALID (not an array)\n*   `{"search_query": ...}` <-- INVALID (not in an array)\n\nAnalyze the following user message(s) and provide **ONLY** the JSON array output.\nDouble-check your response starts with `[` and ends with `]` and contains **NO** other text whatsoever.\n'),
        ),
    ]
