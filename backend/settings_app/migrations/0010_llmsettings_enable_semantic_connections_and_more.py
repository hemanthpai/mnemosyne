# Generated by Django 5.2.1 on 2025-06-06 21:21

from django.db import migrations, models


class Migration(migrations.Migration):

    dependencies = [
        ('settings_app', '0009_remove_memory_categories'),
    ]

    operations = [
        migrations.AddField(
            model_name='llmsettings',
            name='enable_semantic_connections',
            field=models.BooleanField(default=True, help_text='Enable semantic connection enhancement for memory search'),
        ),
        migrations.AddField(
            model_name='llmsettings',
            name='llm_max_tokens',
            field=models.IntegerField(default=2048, help_text='Maximum tokens to generate'),
        ),
        migrations.AddField(
            model_name='llmsettings',
            name='llm_temperature',
            field=models.FloatField(default=0.6, help_text='Controls randomness (0.0-2.0)'),
        ),
        migrations.AddField(
            model_name='llmsettings',
            name='llm_top_k',
            field=models.IntegerField(default=20, help_text='Controls diversity via top-k sampling'),
        ),
        migrations.AddField(
            model_name='llmsettings',
            name='llm_top_p',
            field=models.FloatField(default=0.95, help_text='Controls diversity via nucleus sampling (0.0-1.0)'),
        ),
        migrations.AddField(
            model_name='llmsettings',
            name='memory_summarization_prompt',
            field=models.TextField(default="You are an expert memory analyst tasked with summarizing only the relevant memories based on a user's query. \nYour **ONLY** goal is to extract actionable context from the provided memories that can help answer or respond to the user's query.\n\n**TASK:**\n1. From the provided memories, first identify all the memories that are relevant to the user's query.\n2. Then, create a comprehensive summary of only the relevant memories, focusing on actionable context.\n3. Any memory that does not provide actionable context should be excluded from the summary.\n\n**ANALYSIS REQUIREMENTS:**\n- Focus on actionable insights that directly address the user's query  \n- Include supporting context and background information\n- Identify patterns across multiple memories\n- Classify memories by relevance level (high/moderate/contextual)\n\n**OUTPUT REQUIREMENT:**\nRespond with ONLY a JSON object with:\n- **summary**: comprehensive text summary\n- **key_points**: array of key insights\n- **relevant_context**: supporting context information\n- **confidence**: confidence score (0.0-1.0)\n- **memory_usage**: object with total_memories, highly_relevant, moderately_relevant, context_relevant counts"),
        ),
        migrations.AddField(
            model_name='llmsettings',
            name='search_threshold_contextual',
            field=models.FloatField(default=0.4, help_text='Similarity threshold for contextual searches'),
        ),
        migrations.AddField(
            model_name='llmsettings',
            name='search_threshold_direct',
            field=models.FloatField(default=0.7, help_text='Similarity threshold for direct searches'),
        ),
        migrations.AddField(
            model_name='llmsettings',
            name='search_threshold_experiential',
            field=models.FloatField(default=0.6, help_text='Similarity threshold for experiential searches'),
        ),
        migrations.AddField(
            model_name='llmsettings',
            name='search_threshold_interest',
            field=models.FloatField(default=0.5, help_text='Similarity threshold for interest searches'),
        ),
        migrations.AddField(
            model_name='llmsettings',
            name='search_threshold_semantic',
            field=models.FloatField(default=0.5, help_text='Similarity threshold for semantic searches'),
        ),
        migrations.AddField(
            model_name='llmsettings',
            name='semantic_connection_prompt',
            field=models.TextField(default="Analyze the found memories against the user's query to identify subtle semantic connections that might reveal additional relevant memories.\n\n**TASK:** \nDetermine if there are subtle connections between these memories and the user's query that suggest additional search terms. Look for:\n1. Implicit interests revealed by the memories\n2. Related topics that weren't directly searched\n3. Contextual connections (e.g., if user went to a music festival, they might have favorite artists from that event)\n4. Experience-based connections (e.g., academic background suggesting reading interests)\n\n**OUTPUT REQUIREMENT:**\nRespond with ONLY a JSON object with:\n- **has_connections**: boolean indicating if connections were found\n- **additional_searches**: array of search objects with search_query, rationale, and confidence\n- **reasoning**: explanation of the analysis"),
        ),
        migrations.AddField(
            model_name='llmsettings',
            name='semantic_enhancement_threshold',
            field=models.IntegerField(default=3, help_text='Minimum number of initial results needed to trigger semantic enhancement'),
        ),
    ]
