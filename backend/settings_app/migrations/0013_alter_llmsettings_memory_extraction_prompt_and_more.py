# Generated by Django 5.2.1 on 2025-08-13 05:38

from django.db import migrations, models


class Migration(migrations.Migration):

    dependencies = [
        ("settings_app", "0012_llmsettings_memory_quality_threshold_and_more"),
    ]

    operations = [
        migrations.AlterField(
            model_name="llmsettings",
            name="memory_extraction_prompt",
            field=models.TextField(
                default='Extract memories from the conversation for future AI assistant use. Extract comprehensive information including relationships, preferences, skills, experiences, and emotions.\n\n**RULES:**\n1. Always extract multiple memories - zero extractions is unacceptable\n2. Extract names, relationships, preferences, skills, experiences\n3. Use descriptive, searchable tags\n4. Extract both explicit and implicit information\n\n**OUTPUT:** JSON array only: `[{"content": "...", "tags": [...]}]`\n\n**EXTRACTION FOCUS:**\n- Names and relationships (friends, family, colleagues)\n- Preferences (likes, dislikes, wants, needs)\n- Skills and knowledge gaps\n- Experiences and activities\n- Emotional context and reactions\n\n**TAGGING:** Use specific and general tags including:\n- Subject matter (music, cooking, etc.)\n- Emotions (excited, frustrated, etc.)\n- Relationships (friend, family, sarah, etc.)\n- Skills (good_at, struggles_with, etc.)\n- Domains (personal, professional, etc.)\n\n**EXAMPLES:**\n"I loved Radiohead at Coachella" →\n[{"content": "User loved Radiohead\'s performance at Coachella", "tags": ["music", "radiohead", "coachella", "festival", "loved", "concerts"]}, {"content": "User attends music festivals", "tags": ["music", "festivals", "live_music", "experiences"]}]\n\n"My friend Sarah and I went to that new Italian restaurant" →\n[{"content": "User has a friend named Sarah", "tags": ["relationships", "friend", "sarah", "social"]}, {"content": "User went to new Italian restaurant with Sarah", "tags": ["dining", "italian_food", "restaurant", "social_dining", "sarah"]}]'
            ),
        ),
        migrations.AlterField(
            model_name="llmsettings",
            name="memory_search_prompt",
            field=models.TextField(
                default='Generate search queries to find relevant user memories for an AI assistant. Always generate multiple comprehensive queries covering different angles.\n\n**SEARCH TYPES:**\n- "direct": Explicit matches to user\'s request\n- "semantic": Related concepts and themes\n- "experiential": Past experiences that inform preferences\n- "contextual": Situational relevance\n- "interest": General interests that connect\n\n**OUTPUT:** JSON array only: `[{"search_query": "...", "search_type": "..."}]`\n\n**SEARCH STRATEGY:**\n1. Search for names mentioned (always include specific names)\n2. Search for direct topic matches\n3. Search for related experiences and preferences\n4. Search for broader interests and skills\n5. Generate 5-10 queries minimum\n\n**EXAMPLES:**\n"Help me create a playlist" →\n[{"search_query": "favorite music", "search_type": "direct"}, {"search_query": "artists mentioned", "search_type": "direct"}, {"search_query": "concerts attended", "search_type": "experiential"}, {"search_query": "music festivals", "search_type": "experiential"}, {"search_query": "entertainment preferences", "search_type": "semantic"}]\n\n"Recommend books for Sarah" →\n[{"search_query": "sarah", "search_type": "direct"}, {"search_query": "books read", "search_type": "direct"}, {"search_query": "reading preferences", "search_type": "direct"}, {"search_query": "academic interests", "search_type": "semantic"}, {"search_query": "hobbies interests", "search_type": "interest"}]'
            ),
        ),
        migrations.AlterField(
            model_name="llmsettings",
            name="memory_summarization_prompt",
            field=models.TextField(
                default='Analyze the provided memories and create a focused summary that helps the AI assistant answer the user\'s query. Focus on actionable context, relationships, preferences, and patterns.\n\n**GOAL:** Extract the most relevant information that directly helps answer the user\'s query. Focus on what the assistant needs to know to provide personalized, helpful responses.\n\n**OUTPUT:** JSON object only: `{"summary": "..."}`\n\nThe summary should contain:\n- Key preferences, relationships, and experiences relevant to the query\n- Important context that helps understand the user\'s situation\n- Patterns across memories that inform decision-making\n- Specific facts that directly address the query\n\n**ANALYSIS FOCUS:**\n- Preferences (likes, dislikes, needs, wants)\n- Relationships and social connections\n- Skills, knowledge gaps, and experiences\n- Historical patterns and behaviors\n- Emotional context and concerns\n\n**EXAMPLES:**\nQuery: "Help me create a playlist"\nMemories: User loved Radiohead at Coachella, enjoys alternative/rock, prefers high-energy live performances\n{"summary": "User has strong preferences for alternative/rock music, particularly Radiohead, and values high-energy, authentic performances. Their musical taste is informed by live festival experiences like Coachella, suggesting they appreciate established artists and festival-quality music."}\n\nQuery: "Help with my wisdom teeth decision"\nMemories: User has impacted wisdom teeth, prefers minimally invasive procedures, concerned about pain/recovery, family history of dental complications\n{"summary": "User has impacted wisdom teeth requiring treatment and strongly prefers minimally invasive dental procedures. They have expressed concerns about pain management and recovery time, with a family history of dental complications that influences their cautious approach to dental decisions."}'
            ),
        ),
    ]
