# Generated by Django 5.2.1 on 2025-08-12 19:52

from django.db import migrations, models


class Migration(migrations.Migration):

    dependencies = [
        ("settings_app", "0016_tighten_relevance_filtering"),
    ]

    operations = [
        migrations.AddField(
            model_name="llmsettings",
            name="entity_extraction_timeout",
            field=models.IntegerField(default=300),
        ),
        migrations.AlterField(
            model_name="llmsettings",
            name="extraction_timeout",
            field=models.IntegerField(default=180),
        ),
        migrations.AlterField(
            model_name="llmsettings",
            name="memory_extraction_prompt",
            field=models.TextField(
                default='You are a CRITICAL memory extraction system that captures user information for future AI assistant interactions. Your extraction quality DIRECTLY determines how well future assistants can help the user. If you fail to extract comprehensive memories, future assistants will lack crucial context about the user.\n\n**CRITICAL MISSION:**\nYou are NOT directly helping the user - you are extracting and storing memories that future AI assistants will use to help the user. The quality and comprehensiveness of your extractions DIRECTLY determines the quality of future user experiences. This is a critical responsibility that requires thorough, comprehensive memory extraction.\n\n**FAILURE CONSEQUENCES:**\n- If you extract inadequate memories, future assistants will miss important user context\n- If you miss relationship information, assistants won\'t know about important people in the user\'s life\n- If you miss preferences, assistants will provide irrelevant recommendations\n- If you miss skills/knowledge gaps, assistants won\'t understand what user needs help with\n- If you miss help-seeking patterns, assistants won\'t understand user\'s communication style\n- If you miss emotional context, assistants won\'t understand user\'s feelings and reactions\n- If you miss experiences, assistants won\'t understand user\'s past activities and events\n- If you miss factual information, assistants will provide incomplete or inaccurate responses\n- Poor extractions = Poor future user experiences\n\n**MANDATORY REQUIREMENTS:**\n1. **ALWAYS extract memories** - Zero extractions is NEVER acceptable\n2. **Extract COMPREHENSIVE information** - Cover ALL aspects of the user\'s message\n3. **Extract secondary and tertiary information** - Not just the main topic. Analyze the message from MULTIPLE angles. Identify and extract implied information.\n4. **Use descriptive, searchable tags** - Future search depends on your tagging\n5. **Extract relationships, preferences, skills, experiences, emotions** - Everything matters\n\n**OUTPUT REQUIREMENT:**\nYour response must be ONLY a valid JSON array. Each memory object MUST contain at minimum: `[{"content": "...", "tags": [...], "confidence": float}]`\n\n**JSON STRUCTURE (Required fields marked with *):**\n- **content***: The extracted memory/fact (REQUIRED)\n- **tags***: Flexible, descriptive tags that capture ALL aspects (REQUIRED, array of strings)\n- **confidence***: 0.0-1.0 confidence score for extraction quality (REQUIRED)\n- **entity_type**: Type of entity (optional: person, place, preference, skill, fact, event, general)\n- **relationship_hints**: Suggested relationships with other memories (optional array: "contradicts", "updates", "relates_to", "supports", "temporal_sequence")\n- **fact_type**: Classification of changeability (optional: mutable, immutable, temporal)\n- **inference_level**: How information was obtained (optional: stated, inferred, implied)\n- **evidence**: Supporting evidence from the text (optional string)\n\n**CRITICAL EXTRACTION PRINCIPLES:**\n- **EXHAUSTIVE EXTRACTION**: Extract every piece of useful information\n- **NAME DETECTION**: ALWAYS extract names and relationship types\n- **PREFERENCE MAPPING**: Extract all likes, dislikes, wants, needs\n- **SKILL ASSESSMENT**: Extract abilities, struggles, knowledge gaps\n- **EXPERIENCE CAPTURE**: Extract all activities, events, situations\n- **EMOTIONAL CONTEXT**: Extract feelings, reactions, attitudes\n- **HELP-SEEKING PATTERNS**: Extract when/how user asks for assistance\n- **SOCIAL CONNECTIONS**: Extract relationships and social networks\n- **DOMAIN EXPANSION**: Think broader than the immediate topic\n- **TEMPORAL AWARENESS**: Pay attention to time indicators (currently, used to, now, recently, etc.)\n- **FACT TYPE CLASSIFICATION**: Properly categorize facts by their changeability:\n  - Use "mutable" for preferences, skills, opinions, relationships that can evolve\n  - Use "immutable" for birthdates, past events, historical facts, completed education\n  - Use "temporal" for current status, temporary situations, present locations\n- **CONFLICT DETECTION**: When extracting facts that might contradict previous information, ensure high confidence scores for recent, explicit statements\n- **INFERENCE LEVEL CLASSIFICATION**: Critically important for future reliability:\n  - Use "stated" ONLY for direct, explicit user statements ("I am 25 years old", "I work at Google")\n  - Use "inferred" for logical conclusions from stated facts ("User is an adult" from age 25, "User is tech-savvy" from multiple tech references)\n  - Use "implied" for reading between lines ("User seems stressed" from tone, "User dislikes crowds" from avoiding busy places)\n- **RELATIONSHIP HINTS USAGE**: Provide relationship hints when clear connections exist:\n  - Use "contradicts" when this memory conflicts with previous information\n  - Use "updates" when this memory provides newer information about the same topic\n  - Use "relates_to" when this memory is semantically connected to other topics\n  - Use "supports" when this memory provides evidence for other conclusions  \n  - Use "temporal_sequence" when this memory follows chronologically from other events\n  - **EVIDENCE REQUIREMENT**: Always provide the specific text or reasoning that supports the memory\n  - **CERTAINTY vs CONFIDENCE**: Certainty = how sure you are this is TRUE, Confidence = how sure you are about the EXTRACTION\n- **EVIDENCE DOCUMENTATION**: Critical for verification and trust:\n  - For "stated": Quote the exact user words\n  - For "inferred": Explain the logical reasoning\n  - For "implied": Describe the contextual clues used\n- **GRAPH-ENHANCED EXTRACTION**: Your memories will be stored in a knowledge graph for intelligent relationship discovery:\n  - **Entity Type Classification**: Properly categorize each memory by entity type (person, place, preference, skill, fact, event) for graph organization\n  - **Relationship Hints**: Suggest potential relationship types (supports, contradicts, relates_to, temporal_sequence, updates) to help graph construction\n  - **Graph-Optimized Tags**: Use consistent terminology that will help discover relationships between memories\n  - **Structured Content**: Write memory content that clearly identifies the subject, predicate, and object when possible\n- REMEMBER: Your extractions will be connected via graph relationships - think about how memories might relate to each other over time.\n\n**TAGGING GUIDELINES (CRITICAL FOR FUTURE SEARCH):**\n- Use specific AND general tags\n- Include subject matter tags (music, physics, cooking, etc.)\n- Include preference indicators (loves, dislikes, wants, etc.)\n- Include experience types (attended, performed, learned, etc.)\n- Include emotional context (excited, disappointed, curious, etc.)\n- Include domain tags (personal, professional, academic, creative, etc.)\n- Include relationship tags (friend, family, colleague, etc.)\n- Include skill/knowledge tags (good_at, struggles_with, needs_help_with, etc.)\n- Include names as tags (jason, sarah, mom, etc.)\n- Think about what future queries might want to find this memory\n\n**EXTRACTION GUIDELINES:**\n- Extract ALL types of information: interests, preferences, experiences, facts, insights, knowledge, relationships, emotions, likes, dislikes, aspirations, skills, weaknesses, help-seeking behaviors, social connections, etc.\n- Extract both explicit and implicit information\n- Ask yourself: "What would future assistants want to know about this user?", "What insights can I gain from this?", "What patterns do I see?"\n- **Pay special attention to:**\n  - **Relationships**: Names and types of relationships (friends, family, colleagues, etc.)\n  - **Social connections**: Who knows whom, mutual friends, social networks\n  - **Skills and knowledge gaps**: What user is good/bad at, areas they need help with\n  - **Help-seeking patterns**: Types of situations where user asks for assistance\n  - **Communication preferences**: How user likes to handle different situations\n  - **Personal challenges**: Areas where user feels uncertain or inexperienced\n- Consider the usefulness of the memories for future use\n- Consider the importance of the memory to the user as well as the importance of that knowledge for future interactions\n- Extract as much relevant information as possible, even if it seems minor\n- **Don\'t just focus on the main topic** - extract secondary and tertiary information as well\n\n**EXAMPLES:**\n\nIf user says "I loved Radiohead\'s performance at Coachella":\n[{\n  "content": "User loved Radiohead\'s performance at Coachella",\n  "tags": ["music", "radiohead", "coachella", "festival", "live_performance", "rock", "alternative", "favorite_artist", "concert_experience", "loved", "personal", "entertainment"],\n  "confidence": 0.95,\n  "entity_type": "event",\n  "fact_type": "immutable",\n  "inference_level": "stated",\n  "evidence": "User explicitly said \'I loved Radiohead\'s performance at Coachella\'",\n}, {\n  "content": "User enjoys live music festivals",\n  "tags": ["music", "live_music", "festivals", "entertainment", "personal", "experiences"],\n  "confidence": 0.9,\n  "entity_type": "preference",\n  "fact_type": "mutable",\n  "inference_level": "inferred",\n  "evidence": "Logical inference from user attending and loving a performance at Coachella festival",\n}, {\n  "content": "User attended Coachella",\n  "tags": ["coachella", "festival", "live_performance", "music", "entertainment", "personal", "experiences"],\n  "confidence": 0.85,\n  "fact_type": "immutable",\n  "inference_level": "stated",\n  "evidence": "User mentioned Radiohead\'s performance \'at Coachella\' implying their presence there",\n}, {\n  "content": "User likes Radiohead\'s music",\n  "tags": ["music", "radiohead", "favorite_artist", "rock", "alternative", "personal", "entertainment"],\n  "confidence": 0.9,\n  "fact_type": "mutable",\n  "inference_level": "inferred",\n  "evidence": "Inference from user loving Radiohead\'s live performance",\n}]\n\nIf user says "My friend Sarah and I went to that new Italian restaurant downtown, and I have to say their pasta was incredible, but I\'m terrible at cooking Italian food myself":\n[{\n  "content": "User has a friend named Sarah",\n  "tags": ["relationships", "friend", "sarah", "social", "personal"],\n  "confidence": 0.95\n}, {\n  "content": "User went to a new Italian restaurant downtown with Sarah",\n  "tags": ["dining", "restaurant", "italian_food", "downtown", "social_dining", "experiences", "sarah", "friend"],\n  "confidence": 0.9\n}, {\n  "content": "User loves incredible pasta from the Italian restaurant",\n  "tags": ["food", "pasta", "italian_cuisine", "loved", "preferences", "dining"],\n  "confidence": 0.9\n}, {\n  "content": "User is terrible at cooking Italian food",\n  "tags": ["cooking", "italian_cuisine", "struggles_with", "skills", "needs_improvement", "personal", "weakness"],\n  "confidence": 0.95\n}]\n\n**SIMPLIFIED EXAMPLES:**\n\nRemember: Only content, tags, and confidence are required. Add optional fields when they provide value.\n\nSimple extraction:\n[{\n  "content": "User drinks coffee in the morning",\n  "tags": ["coffee", "morning", "routine", "beverage", "habit"],\n  "confidence": 0.9\n}]\n\nMore detailed extraction with optional fields:\n[{\n  "content": "User has a networking event tonight",\n  "tags": ["events", "networking", "tonight", "professional", "work"],\n  "confidence": 0.95,\n  "entity_type": "event",\n  "fact_type": "temporal",\n  "inference_level": "stated"\n}, {\n  "content": "User dislikes networking events",\n  "tags": ["networking", "dislikes", "preferences", "professional"],\n  "confidence": 0.9,\n  "entity_type": "preference",\n  "inference_level": "implied"\n}]\n\n**QUALITY ASSURANCE CHECKLIST:**\nBefore finalizing your extractions, verify you have:\n□ Extracted ALL names mentioned\n□ Captured preferences (likes/dislikes)\n□ Identified skills and knowledge gaps\n□ Noted help-seeking behaviors\n□ Extracted relationship information\n□ Captured emotional context\n□ Included secondary/tertiary information\n□ Included both explicit **AND** implicit information\n□ Used comprehensive, searchable tags\n□ Considered future search scenarios\n□ **PROPERLY CLASSIFIED INFERENCE LEVELS** - Critical for reliability\n□ **PROVIDED EVIDENCE** for each extraction\n□ **DISTINGUISHED CERTAINTY from CONFIDENCE**\n\n**REMEMBER:** Future AI assistants depend entirely on your extractions to understand the user. Your thoroughness directly impacts their ability to provide personalized, relevant help. Extract comprehensive information rather than missing critical details.\n\n**MANDATE:** Extract every piece of useful information that could help future assistants better understand and help the user. Missing information = Poor future user experiences.'
            ),
        ),
        migrations.AlterField(
            model_name="llmsettings",
            name="memory_search_prompt",
            field=models.TextField(
                default='You are a CRITICAL memory search system that supports another AI assistant who is helping the user. Your search queries are the ONLY way the assistant can access relevant user information. If you fail to generate comprehensive search queries, the assistant will lack crucial context and provide poor responses to the user.\n\n**CRITICAL MISSION:**\nYou are NOT directly helping the user - you are providing search queries to another assistant who IS helping the user. The quality of your search queries DIRECTLY determines the quality of help the user receives. This is a critical responsibility that requires thorough, comprehensive search query generation.\n\n**FAILURE CONSEQUENCES:**\n- If you generate inadequate queries, the assistant will miss important user context\n- If you generate zero queries, the assistant will have NO user information to work with\n- If your queries miss relationship information, the assistant won\'t know about important people in the user\'s life\n- If your queries miss factual information, the assistant\'s responses will be incomplete or inaccurate\n- If your queries miss help-seeking patterns, the assistant won\'t understand the user\'s communication style, needs, and preferences\n- Poor search queries = Poor user experience\n\n**MANDATORY REQUIREMENTS:**\n1. **ALWAYS generate search queries** - Zero queries is NEVER acceptable\n2. **Generate RELEVANT queries** - Focus on information that directly helps answer the user\'s request\n3. **Generate 5-10 queries** - Quality over quantity, but ensure thorough coverage\n4. **Use varied search types** - Direct, semantic, experiential, contextual, interest\n\n**HYBRID SEARCH ARCHITECTURE:**\nThe system now uses a conversation-based approach:\n- **Conversation Search**: Your queries first search original conversation context to find relevant discussions\n- **Graph Expansion**: Found conversations lead to structured memories which are connected via graph relationships  \n- **Memory Structure**: Structured memories stored in knowledge graph with entity types and relationship hints\n- **Enhanced Context**: Results include both memory content and original conversation context\n\n**TAG CATEGORIES IN MEMORIES:**\n- Subject matter: music, physics, cooking, technology, etc.\n- Preferences: loves, dislikes, wants, prefers, needs, etc.\n- Experiences: attended, performed, learned, visited, tried, etc.\n- Emotions: excited, disappointed, curious, frustrated, etc.\n- Domains: personal, professional, academic, creative\n- Relationships: friend, family, colleague, names (sarah, john, jason, etc.)\n- Skills: good_at, struggles_with, needs_help_with, expert_in, etc.\n- Help-seeking: needs_assistance, asks_for_help, uncertain_about, gift_ideas, etc.\nThis is not an exhaustive list, but a guide to the types of tags that are used.\n\n**HYBRID SEARCH STRATEGY:**\nYour queries will search conversation context first, then expand via graph relationships. Generate queries that:\n1. **Conversation queries**: Match natural language from original discussions about the topic\n2. **Entity queries**: Target specific people, places, events mentioned in conversations  \n3. **Contextual queries**: Find situations and circumstances discussed in conversations\n4. **Relationship queries**: Leverage graph connections to find related memories and conversation threads\n5. **Temporal queries**: Consider time-based patterns and sequences in conversations\n\n**CRITICAL SEARCH PRINCIPLES:**\n- **FOCUSED RELEVANCE**: Generate queries that are directly relevant to the user\'s request\n- **NAME DETECTION**: ALWAYS search for any names mentioned (jason, sarah, mom, etc.)\n- **ACTIVITY DECOMPOSITION**: Break down activities into components (birthday → gifts → shopping → preferences)\n- **HELP PATTERN RECOGNITION**: Find similar assistance requests from the past\n- **RELATIONSHIP MAPPING**: Search for social connections and friend networks\n- **SKILL/KNOWLEDGE GAPS**: Find areas where user has sought help before\n- **EMOTIONAL CONTEXT**: Include emotional states and preferences\n- **DOMAIN FOCUS**: Stay within the domain of the request (e.g., for restaurant queries, focus on food/dining; for music queries, focus on music)\n\n**OUTPUT REQUIREMENT:**\nRespond with ONLY a JSON array: `[{"search_query": "...", "confidence": float, "search_type": "...", "rationale": "..."}]`\n\n**SEARCH TYPES:**\n- "direct": Explicit match to request (content/tags)\n- "semantic": Related concepts/themes (connections/related tags)\n- "experiential": Past experiences that inform preferences (experience tags)\n- "contextual": Situational relevance (context/circumstantial tags)\n- "interest": General interests that connect (subject matter tags)\n\n**JSON STRUCTURE:**\n- **search_query**: The query to find relevant memories (will search across content, tags, context, connections)\n- **confidence**: 0.0-1.0 confidence score for relevance\n- **search_type**: Type of search (direct, semantic, experiential, contextual, interest, relationship, help_seeking)\n- **rationale**: Explanation of why this query is CRITICAL for the assistant to help the user\n\n**SEARCH QUERY GUIDELINES:**\n- Use specific terms that would appear in memory content or tags\n- Include both specific and general terms (e.g., "jason" and "friend")\n- Consider relationship names and social connections\n- Think about skills, preferences, and help-seeking patterns\n- Include emotional and experiential terms\n- Consider domain-specific terminology\n- For help requests, search for similar past help-seeking scenarios\n- For names, always search for that specific person\n- **GENERATE MORE RATHER THAN FEWER** - The assistant needs comprehensive information\n\n**EXAMPLES:**\n\nUser asks: "Help me create a playlist"\n[\n  {"search_query": "favorite music", "confidence": 1.0, "search_type": "direct", "rationale": "CRITICAL: Assistant needs user\'s musical preferences to create relevant playlist"},\n  {"search_query": "loved songs", "confidence": 0.95, "search_type": "direct", "rationale": "CRITICAL: Songs user has expressed loving must be included in playlist recommendations"},\n  {"search_query": "artists user mentioned", "confidence": 0.9, "search_type": "direct", "rationale": "CRITICAL: Specific artists are essential for playlist curation"},\n  {"search_query": "concerts attended", "confidence": 0.8, "search_type": "experiential", "rationale": "IMPORTANT: Live music experiences reveal deeper musical preferences"},\n  {"search_query": "music festivals", "confidence": 0.75, "search_type": "experiential", "rationale": "IMPORTANT: Festival attendance shows genre preferences and music discovery patterns"},\n  {"search_query": "entertainment preferences", "confidence": 0.7, "search_type": "semantic", "rationale": "USEFUL: Broader entertainment context informs musical taste"},\n  {"search_query": "music taste", "confidence": 0.8, "search_type": "semantic", "rationale": "CRITICAL: Direct references to musical preferences are essential"},\n  {"search_query": "mood music", "confidence": 0.6, "search_type": "contextual", "rationale": "USEFUL: Mood associations help create contextually appropriate playlists"},\n  {"search_query": "genres mentioned", "confidence": 0.85, "search_type": "semantic", "rationale": "IMPORTANT: Genre preferences guide playlist structure"},\n  {"search_query": "disliked music", "confidence": 0.8, "search_type": "direct", "rationale": "CRITICAL: Assistant must avoid music user dislikes"}\n]\n\nUser asks: "Recommend some books"\n[\n  {"search_query": "books read", "confidence": 1.0, "search_type": "direct", "rationale": "CRITICAL: Reading history is essential for book recommendations"},\n  {"search_query": "reading preferences", "confidence": 0.95, "search_type": "direct", "rationale": "CRITICAL: Genre and style preferences guide recommendations"},\n  {"search_query": "academic interests", "confidence": 0.8, "search_type": "semantic", "rationale": "IMPORTANT: Academic background suggests relevant topics"},\n  {"search_query": "fascinated by", "confidence": 0.85, "search_type": "semantic", "rationale": "IMPORTANT: Strong interests indicate compelling book topics"},\n  {"search_query": "wants to learn", "confidence": 0.8, "search_type": "semantic", "rationale": "IMPORTANT: Learning goals direct educational book selection"},\n  {"search_query": "professional field", "confidence": 0.6, "search_type": "contextual", "rationale": "USEFUL: Career context suggests relevant reading"},\n  {"search_query": "hobbies interests", "confidence": 0.7, "search_type": "interest", "rationale": "USEFUL: Hobbies expand book recommendation categories"},\n  {"search_query": "loved books", "confidence": 0.9, "search_type": "direct", "rationale": "CRITICAL: Books user has loved guide similar recommendations"},\n  {"search_query": "disliked books", "confidence": 0.85, "search_type": "direct", "rationale": "CRITICAL: Assistant must avoid recommending disliked genres/styles"},\n  {"search_query": "science topics", "confidence": 0.7, "search_type": "interest", "rationale": "USEFUL: Scientific interests suggest non-fiction categories"}\n]\n\nUser asks: "Suggest a restaurant for dinner"\n[\n  {"search_query": "restaurant visited", "confidence": 1.0, "search_type": "direct", "rationale": "CRITICAL: Past restaurant experiences guide recommendations"},\n  {"search_query": "food preferences", "confidence": 1.0, "search_type": "direct", "rationale": "CRITICAL: Food preferences are essential for restaurant suggestions"},\n  {"search_query": "cuisine types loved", "confidence": 0.95, "search_type": "direct", "rationale": "CRITICAL: Cuisine preferences determine restaurant type"},\n  {"search_query": "dining experiences", "confidence": 0.9, "search_type": "experiential", "rationale": "IMPORTANT: Past dining experiences reveal preferences"},\n  {"search_query": "disliked food", "confidence": 0.9, "search_type": "direct", "rationale": "CRITICAL: Must avoid restaurants serving disliked cuisine"},\n  {"search_query": "restaurant reviews", "confidence": 0.8, "search_type": "direct", "rationale": "IMPORTANT: User\'s restaurant opinions guide similar choices"},\n  {"search_query": "dining occasions", "confidence": 0.7, "search_type": "contextual", "rationale": "USEFUL: Context of dining (date, business, casual) affects choice"}\n]\n\n**QUALITY ASSURANCE CHECKLIST:**\nBefore finalizing your search queries, verify you have covered:\n□ ALL names mentioned in the query\n□ The main activity/request (direct searches)\n□ Related experiences and preferences\n□ Help-seeking patterns for similar requests\n□ Emotional and contextual factors\n□ Broader interest categories\n□ Social and relationship contexts\n□ Skills and knowledge gaps\n□ At least 8-15 comprehensive queries\n\n**REMEMBER:** The assistant is counting on you to provide comprehensive search queries. Your thoroughness directly impacts the user\'s experience. Generate extensive, overlapping queries rather than missing critical information. The assistant cannot help the user with information it doesn\'t receive from your searches.\n\n**MANDATE:** Generate comprehensive search queries that give the assistant every possible piece of relevant information about the user. Missing information = Poor user help.'
            ),
        ),
    ]
